" ==================== General Config ==================== 

set hlsearch
set number relativenumber           " show hybrid number
set history=1000                    " store lots of :cmdline history
set autoread                        " reload files changes outside vim
set ignorecase                      " ignore case when searching...
set smartcase                       " ...unless we type a capital
set visualbell                      " no sounds
map <Leader>h :noh<cr>
ino jj <esc>
cno jj <c-c>
vno v <esc>
nnoremap <Leader>w :w!<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>qq :q!<CR>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/bower_components/*,*/node_modules/*,*/dist/*,*/vendor/*,.git
set cursorline
set textwidth=120
set pastetoggle=<F2>
set shell=/usr/local/bin/zsh

" ==================== Color Theme  ====================" 
colorscheme railscasts
" hide vertical red line
" set colorcolumn=0

" ==================== Folds ==================== 

set foldmethod=indent   "fold based on indent
set nofoldenable        "dont fold by default

" ==================== Scrolling ==================== 

set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" ==================== Ctags  ==================== 

set autochdir
set tags=./tags;,tags;

" TagbarToggle (see tag structure of the file)
" nnoremap <silent> <Leader>b :TagbarToggle<CR>

" ==================== NERDTree  ==================== 

map <C-n> :NERDTreeToggle<CR>
map <leader>rr :NERDTreeFind<cr>

" ==================== FZF (ripgrep) ==================== 
" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
" command! -bang -nargs=* Rg
"   \ call fzf#vim#grep(
"   \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
"   \   <bang>0 ? fzf#vim#with_preview('up:60%')
"   \           : fzf#vim#with_preview('right:50%:hidden', '?'),
"   \   <bang>0)
command! -bang -nargs=* Rg call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

imap <c-x><c-o> <plug>(fzf-complete-line)
map <leader>b :Buffers<cr>
map <leader>f :Files<cr>
map <leader>gf :GFiles<cr>
map <leader>tag :Tags<cr>

" ==================== Shortcuts ====================
let g:move_key_modifier = 'C'
map go :Google<cr>

" ==================== highlightedyank ====================
if !exists('##TextYankPost')
  map y <Plug>(highlightedyank)
endif

" ==================== tmux (move between panes)  ==================== 
if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
endif

" ==================== vim-projectionist ===================
" change from test to production code and vice-versa using projectionist
nnoremap <leader><leader> :A<CR>

" ==================== vim-test ====================
let test#strategy = "dispatch"
